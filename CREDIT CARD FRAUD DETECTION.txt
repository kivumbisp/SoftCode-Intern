# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, precision_score, recall_score, f1_score
from imblearn.over_sampling import SMOTE

# Load the dataset
# Assume we have a dataset 'creditcard.csv' with relevant columns
data = pd.read_csv('creditcard.csv')

# Data Exploration
print(data.head())
print(data.info())
print(data.describe())

# Data Preprocessing
# Normalize the 'Amount' column and drop 'Time' column
data['Amount'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1, 1))
data = data.drop(['Time'], axis=1)

# Define features (X) and target (y)
X = data.drop('Class', axis=1)
y = data['Class']

# Handling Class Imbalance using SMOTE
sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X, y)

# Splitting the Data
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

# Building the Model - Logistic Regression
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

# Building the Model - Random Forest
rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)
rf_clf.fit(X_train, y_train)

# Evaluating the Model - Logistic Regression
y_pred_log_reg = log_reg.predict(X_test)
print("Logistic Regression Performance:")
print("Precision:", precision_score(y_test, y_pred_log_reg))
print("Recall:", recall_score(y_test, y_pred_log_reg))
print("F1 Score:", f1_score(y_test, y_pred_log_reg))
print("Classification Report:\n", classification_report(y_test, y_pred_log_reg))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_log_reg))

# Evaluating the Model - Random Forest
y_pred_rf = rf_clf.predict(X_test)
print("\nRandom Forest Performance:")
print("Precision:", precision_score(y_test, y_pred_rf))
print("Recall:", recall_score(y_test, y_pred_rf))
print("F1 Score:", f1_score(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))