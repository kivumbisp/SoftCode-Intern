# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load the dataset
url = "https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv"
data = pd.read_csv(url)

# Data Exploration
print(data.head())
print(data.info())
print(data.describe())

# Data Preprocessing
# Drop columns that won't be used in the model
data = data.drop(['Name', 'Ticket', 'Cabin'], axis=1)

# Handle missing values
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)

# Convert categorical variables to numerical
data = pd.get_dummies(data, columns=['Sex', 'Embarked'], drop_first=True)

# Feature Engineering
# Define features (X) and target (y)
X = data.drop('Survived', axis=1)
y = data['Survived']

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardizing the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Building the Model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluating the Model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Making Predictions
# Example prediction with sample data
sample_data = np.array([[3, 22.0, 1, 0, 7.25, 0, 1, 0]]).reshape(1, -1)  # 3rd class, 22 years old, 1 sibling/spouse, 0 parents/children, $7.25 fare, male, embarked from S
sample_data = scaler.transform(sample_data)
prediction = model.predict(sample_data)
print("Prediction (0 = Not Survived, 1 = Survived):", prediction[0])