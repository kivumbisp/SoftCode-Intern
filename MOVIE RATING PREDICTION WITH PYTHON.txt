# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
# Assume we have a dataset 'movies.csv' with relevant columns
data = pd.read_csv('movies.csv')

# Data Exploration
print(data.head())
print(data.info())
print(data.describe())

# Data Preprocessing
# Drop any columns that won't be used in the model
data = data.drop(['Title', 'ReleaseDate'], axis=1)

# Handle missing values if necessary
data.fillna(method='ffill', inplace=True)

# Convert categorical variables to numerical using OneHotEncoder
categorical_features = ['Genre', 'Director', 'Actors']
encoder = OneHotEncoder(sparse=False)
encoded_features = pd.DataFrame(encoder.fit_transform(data[categorical_features]))

# Ensure the encoded feature columns are properly named
encoded_features.columns = encoder.get_feature_names(categorical_features)

# Merge the encoded features with the original dataset and drop the original categorical columns
data = data.join(encoded_features).drop(categorical_features, axis=1)

# Feature Engineering
# Define features (X) and target (y)
X = data.drop('Rating', axis=1)
y = data['Rating']

# Splitting the Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Building the Model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluating the Model
y_pred = model.predict(X_test)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared Score:", r2_score(y_test, y_pred))

# Making Predictions
# Example prediction with sample data
sample_data = np.array([0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1]).reshape(1, -1)  # Example encoded feature values
prediction = model.predict(sample_data)
print("Predicted Rating:", prediction[0])